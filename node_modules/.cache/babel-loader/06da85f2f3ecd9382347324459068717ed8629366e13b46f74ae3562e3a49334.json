{"ast":null,"code":"var _jsxFileName = \"/home/ismail/React/todo list/todo/src/Import/Word.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport fileType from 'file-type';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EmailCounter() {\n  _s();\n  const [emailCount, setEmailCount] = useState(0);\n  const [emails, setEmails] = useState([]);\n\n  // function to handle file selection\n  function handleFileSelection(event) {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n    reader.onload = function (event) {\n      const contents = event.target.result;\n      const fileTypeInfo = fileType(contents);\n      if (fileTypeInfo && (fileTypeInfo.mime === 'application/msword' || fileTypeInfo.mime === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' || fileTypeInfo.mime === 'text/plain' || fileTypeInfo.mime === 'application/pdf')) {\n        const emails = contents.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/g) || []; // find all emails in contents using regex\n\n        setEmailCount(emails.length);\n        setEmails(emails);\n      } else {\n        alert('Invalid file or file type.');\n      }\n    };\n    reader.readAsArrayBuffer(file);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileSelection\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Number of emails found: \", emailCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), emails.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Emails:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: emails.map(email => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: email\n        }, email, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n_s(EmailCounter, \"VB2R5KJn8vkFFSCL1NEIy+EWB/w=\");\n_c = EmailCounter;\nexport default EmailCounter;\nvar _c;\n$RefreshReg$(_c, \"EmailCounter\");","map":{"version":3,"names":["React","useState","fileType","jsxDEV","_jsxDEV","EmailCounter","_s","emailCount","setEmailCount","emails","setEmails","handleFileSelection","event","file","target","files","reader","FileReader","onload","contents","result","fileTypeInfo","mime","match","length","alert","readAsArrayBuffer","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","map","email","_c","$RefreshReg$"],"sources":["/home/ismail/React/todo list/todo/src/Import/Word.js"],"sourcesContent":["import React, { useState } from 'react';\nimport fileType from 'file-type';\n\nfunction EmailCounter() {\n  const [emailCount, setEmailCount] = useState(0);\n  const [emails, setEmails] = useState([]);\n\n  // function to handle file selection\n  function handleFileSelection(event) {\n    const file = event.target.files[0];\n\n    const reader = new FileReader();\n\n    reader.onload = function(event) {\n      const contents = event.target.result;\n      const fileTypeInfo = fileType(contents);\n\n      if (fileTypeInfo && (fileTypeInfo.mime === 'application/msword' || fileTypeInfo.mime === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' || fileTypeInfo.mime === 'text/plain' || fileTypeInfo.mime === 'application/pdf')) {\n        const emails = contents.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/g) || []; // find all emails in contents using regex\n\n        setEmailCount(emails.length);\n        setEmails(emails);\n      } else {\n        alert('Invalid file or file type.');\n      }\n    };\n\n    reader.readAsArrayBuffer(file);\n  }\n\n  return (\n    <div>\n      <input type=\"file\" onChange={handleFileSelection} />\n      <p>Number of emails found: {emailCount}</p>\n      {emails.length > 0 && (\n        <div>\n          <p>Emails:</p>\n          <ul>\n            {emails.map(email => (\n              <li key={email}>{email}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default EmailCounter;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAExC;EACA,SAASU,mBAAmBA,CAACC,KAAK,EAAE;IAClC,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAElC,MAAMC,MAAM,GAAG,IAAIC,UAAU,EAAE;IAE/BD,MAAM,CAACE,MAAM,GAAG,UAASN,KAAK,EAAE;MAC9B,MAAMO,QAAQ,GAAGP,KAAK,CAACE,MAAM,CAACM,MAAM;MACpC,MAAMC,YAAY,GAAGnB,QAAQ,CAACiB,QAAQ,CAAC;MAEvC,IAAIE,YAAY,KAAKA,YAAY,CAACC,IAAI,KAAK,oBAAoB,IAAID,YAAY,CAACC,IAAI,KAAK,yEAAyE,IAAID,YAAY,CAACC,IAAI,KAAK,YAAY,IAAID,YAAY,CAACC,IAAI,KAAK,iBAAiB,CAAC,EAAE;QACpP,MAAMb,MAAM,GAAGU,QAAQ,CAACI,KAAK,CAAC,sDAAsD,CAAC,IAAI,EAAE,CAAC,CAAC;;QAE7Ff,aAAa,CAACC,MAAM,CAACe,MAAM,CAAC;QAC5Bd,SAAS,CAACD,MAAM,CAAC;MACnB,CAAC,MAAM;QACLgB,KAAK,CAAC,4BAA4B,CAAC;MACrC;IACF,CAAC;IAEDT,MAAM,CAACU,iBAAiB,CAACb,IAAI,CAAC;EAChC;EAEA,oBACET,OAAA;IAAAuB,QAAA,gBACEvB,OAAA;MAAOwB,IAAI,EAAC,MAAM;MAACC,QAAQ,EAAElB;IAAoB;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eACpD7B,OAAA;MAAAuB,QAAA,GAAG,0BAAwB,EAACpB,UAAU;IAAA;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,EAC1CxB,MAAM,CAACe,MAAM,GAAG,CAAC,iBAChBpB,OAAA;MAAAuB,QAAA,gBACEvB,OAAA;QAAAuB,QAAA,EAAG;MAAO;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAI,eACd7B,OAAA;QAAAuB,QAAA,EACGlB,MAAM,CAACyB,GAAG,CAACC,KAAK,iBACf/B,OAAA;UAAAuB,QAAA,EAAiBQ;QAAK,GAAbA,KAAK;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACf;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAER;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACG;AAEV;AAAC3B,EAAA,CA3CQD,YAAY;AAAA+B,EAAA,GAAZ/B,YAAY;AA6CrB,eAAeA,YAAY;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}