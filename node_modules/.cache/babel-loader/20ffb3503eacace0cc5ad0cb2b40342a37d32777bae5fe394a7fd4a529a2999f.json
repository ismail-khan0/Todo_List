{"ast":null,"code":"var _jsxFileName = \"/home/ismail/React/todo list/todo/src/Import/Word.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport { Document } from 'docx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Word = () => {\n  _s();\n  const [emailAddresses, setEmailAddresses] = useState([]);\n  const [emailCount, setEmailCount] = useState(0);\n  const [fileText, setFileText] = useState('');\n  const extractEmails = text => {\n    const emailRegex = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g;\n    const emails = text.match(emailRegex) || [];\n    const uniqueEmails = [...new Set(emails)]; // remove duplicates\n    setEmailAddresses(uniqueEmails);\n    setEmailCount(uniqueEmails.length);\n  };\n  const readDOCX = async file => {\n    const arrayBuffer = await file.arrayBuffer();\n    const doc = new Document();\n    const text = await doc.extractText(arrayBuffer);\n    extractEmails(text);\n    setFileText(text);\n  };\n  const handleFileSelect = useCallback(event => {\n    var _event$target$files;\n    const file = (_event$target$files = event.target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files[0];\n    if (file && file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {\n      readDOCX(file);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), emailCount > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Email Count: \", emailCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: emailAddresses.map((email, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: email\n        }, `email-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this), fileText && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"File Text:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: fileText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(Word, \"yVPvwffajvJ3+I1oE2FsUz6EVII=\");\n_c = Word;\nexport default Word;\nvar _c;\n$RefreshReg$(_c, \"Word\");","map":{"version":3,"names":["React","useState","useCallback","Document","jsxDEV","_jsxDEV","Word","_s","emailAddresses","setEmailAddresses","emailCount","setEmailCount","fileText","setFileText","extractEmails","text","emailRegex","emails","match","uniqueEmails","Set","length","readDOCX","file","arrayBuffer","doc","extractText","handleFileSelect","event","_event$target$files","target","files","type","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","map","email","index","_c","$RefreshReg$"],"sources":["/home/ismail/React/todo list/todo/src/Import/Word.js"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { Document } from 'docx';\n\nconst Word= () => {\n  const [emailAddresses, setEmailAddresses] = useState([]);\n  const [emailCount, setEmailCount] = useState(0);\n  const [fileText, setFileText] = useState('');\n\n  const extractEmails = (text) => {\n    const emailRegex = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g;\n    const emails = text.match(emailRegex) || [];\n    const uniqueEmails = [...new Set(emails)]; // remove duplicates\n    setEmailAddresses(uniqueEmails);\n    setEmailCount(uniqueEmails.length);\n  };\n\n  const readDOCX = async (file) => {\n    const arrayBuffer = await file.arrayBuffer();\n    const doc = new Document();\n    const text = await doc.extractText(arrayBuffer);\n    extractEmails(text);\n    setFileText(text);\n  };\n\n  const handleFileSelect = useCallback((event) => {\n    const file = event.target.files?.[0];\n    if (file && file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {\n      readDOCX(file);\n    }\n  }, []);\n\n  return (\n    <div>\n      <input type=\"file\" onChange={handleFileSelect} />\n      {emailCount > 0 && (\n        <div>\n          <h3>Email Count: {emailCount}</h3>\n          <ul>\n            {emailAddresses.map((email, index) => (\n              <li key={`email-${index}`}>{email}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n      {fileText && (\n        <div>\n          <h3>File Text:</h3>\n          <pre>{fileText}</pre>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Word;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}