{"ast":null,"code":"var _jsxFileName = \"/home/ismail/React/todo list/todo/src/Import/Word.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport { Document } from 'docx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Word = () => {\n  _s();\n  const [emailAddresses, setEmailAddresses] = useState([]);\n  const [emailCount, setEmailCount] = useState(0);\n  const [fileText, setFileText] = useState('');\n  const extractEmails = text => {\n    const emailRegex = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g;\n    const emails = text.match(emailRegex) || [];\n    const uniqueEmails = [...new Set(emails)]; // remove duplicates\n    const emailList = uniqueEmails.join(', ');\n    const emailCountText = `${uniqueEmails.length} email${uniqueEmails.length === 1 ? '' : 's'}`;\n    setEmailAddresses(emailList);\n    setEmailCount(emailCountText);\n  };\n  const readDOCX = async file => {\n    const arrayBuffer = await file.arrayBuffer();\n    const doc = new Document();\n    const text = await doc.extractText(arrayBuffer);\n    extractEmails(text);\n    setFileText(text);\n  };\n  const handleFileSelect = useCallback(event => {\n    var _event$target$files;\n    const file = (_event$target$files = event.target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files[0];\n    if (file && file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {\n      readDOCX(file);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-upload\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file-upload\",\n        className: \"cursor-pointer\",\n        children: \"Upload Word Document\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"file-upload\",\n        type: \"file\",\n        onChange: handleFileSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), emailCount && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"email-count\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Email Count: \", emailCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this), emailAddresses && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"email-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Extracted Emails:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: emailAddresses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this), fileText && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-text\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"File Text:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: fileText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: [\"Count: \", emailCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: [\"Email: \", emailAddresses]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(Word, \"yVPvwffajvJ3+I1oE2FsUz6EVII=\");\n_c = Word;\nexport default Word;\nvar _c;\n$RefreshReg$(_c, \"Word\");","map":{"version":3,"names":["React","useState","useCallback","Document","jsxDEV","_jsxDEV","Word","_s","emailAddresses","setEmailAddresses","emailCount","setEmailCount","fileText","setFileText","extractEmails","text","emailRegex","emails","match","uniqueEmails","Set","emailList","join","emailCountText","length","readDOCX","file","arrayBuffer","doc","extractText","handleFileSelect","event","_event$target$files","target","files","type","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","onChange","_c","$RefreshReg$"],"sources":["/home/ismail/React/todo list/todo/src/Import/Word.js"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { Document } from 'docx';\n\nconst Word = () => {\n  const [emailAddresses, setEmailAddresses] = useState([]);\n  const [emailCount, setEmailCount] = useState(0);\n  const [fileText, setFileText] = useState('');\n\n  const extractEmails = (text) => {\n    const emailRegex = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g;\n    const emails = text.match(emailRegex) || [];\n    const uniqueEmails = [...new Set(emails)]; // remove duplicates\n    const emailList = uniqueEmails.join(', ');\n    const emailCountText = `${uniqueEmails.length} email${uniqueEmails.length === 1 ? '' : 's'}`;\n    setEmailAddresses(emailList);\n    setEmailCount(emailCountText);\n  };\n\n  const readDOCX = async (file) => {\n    const arrayBuffer = await file.arrayBuffer();\n    const doc = new Document();\n    const text = await doc.extractText(arrayBuffer);\n    extractEmails(text);\n    setFileText(text);\n  };\n\n  const handleFileSelect = useCallback((event) => {\n    const file = event.target.files?.[0];\n    if (file && file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {\n      readDOCX(file);\n    }\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <div className=\"file-upload\">\n        <label htmlFor=\"file-upload\" className=\"cursor-pointer\">\n          Upload Word Document\n        </label>\n        <input id=\"file-upload\" type=\"file\" onChange={handleFileSelect} />\n      </div>\n      {emailCount && (\n        <div className=\"email-count\">\n          <h3>Email Count: {emailCount}</h3>\n        </div>\n      )}\n      {emailAddresses && (\n        <div className=\"email-list\">\n          <h3>Extracted Emails:</h3>\n          <pre>{emailAddresses}</pre>\n        </div>\n      )}\n      {fileText && (\n        <div className=\"file-text\">\n          <h3>File Text:</h3>\n          <pre>{fileText}</pre>\n          <pre>Count: {emailCount}</pre>\n          <pre>Email: {emailAddresses}</pre>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Word;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}