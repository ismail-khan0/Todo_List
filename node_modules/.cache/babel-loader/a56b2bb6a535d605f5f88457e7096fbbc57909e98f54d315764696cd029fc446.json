{"ast":null,"code":"var _jsxFileName = \"/home/ismail/React/todo list/todo/src/Import/Word.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EmailCounter() {\n  _s();\n  const [emailCount, setEmailCount] = useState(0);\n  const [emails, setEmails] = useState([]);\n\n  // function to handle file selection\n  function handleFileSelection(event) {\n    const file = event.target.files[0];\n    if (file && (file.type === 'application/msword' || file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' || file.type === 'text/plain' || file.type === 'application/pdf')) {\n      const reader = new FileReader();\n      reader.onload = function (event) {\n        const contents = event.target.result;\n        const emails = contents.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/g) || []; // find all emails in contents using regex\n\n        setEmailCount(emails.length);\n        setEmails(emails);\n      };\n      reader.readAsText(file);\n    } else {\n      alert('Invalid file or file type.');\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileSelection\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Number of emails found: \", emailCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), emails.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Emails:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: emails.map(email => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: email\n        }, email, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_s(EmailCounter, \"VB2R5KJn8vkFFSCL1NEIy+EWB/w=\");\n_c = EmailCounter;\nexport default EmailCounter;\nvar _c;\n$RefreshReg$(_c, \"EmailCounter\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","EmailCounter","_s","emailCount","setEmailCount","emails","setEmails","handleFileSelection","event","file","target","files","type","reader","FileReader","onload","contents","result","match","length","readAsText","alert","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","map","email","_c","$RefreshReg$"],"sources":["/home/ismail/React/todo list/todo/src/Import/Word.js"],"sourcesContent":["import React, { useState } from 'react';\n\nfunction EmailCounter() {\n  const [emailCount, setEmailCount] = useState(0);\n  const [emails, setEmails] = useState([]);\n\n  // function to handle file selection\n  function handleFileSelection(event) {\n    const file = event.target.files[0];\n\n    if (file && (file.type === 'application/msword' || file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' || file.type === 'text/plain' || file.type === 'application/pdf')) {\n      const reader = new FileReader();\n\n      reader.onload = function(event) {\n        const contents = event.target.result;\n        const emails = contents.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/g) || []; // find all emails in contents using regex\n\n        setEmailCount(emails.length);\n        setEmails(emails);\n      };\n\n      reader.readAsText(file);\n    } else {\n      alert('Invalid file or file type.');\n    }\n  }\n\n  return (\n    <div>\n      <input type=\"file\" onChange={handleFileSelection} />\n      <p>Number of emails found: {emailCount}</p>\n      {emails.length > 0 && (\n        <div>\n          <p>Emails:</p>\n          <ul>\n            {emails.map(email => (\n              <li key={email}>{email}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default EmailCounter;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACO,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;;EAExC;EACA,SAASS,mBAAmBA,CAACC,KAAK,EAAE;IAClC,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAElC,IAAIF,IAAI,KAAKA,IAAI,CAACG,IAAI,KAAK,oBAAoB,IAAIH,IAAI,CAACG,IAAI,KAAK,yEAAyE,IAAIH,IAAI,CAACG,IAAI,KAAK,YAAY,IAAIH,IAAI,CAACG,IAAI,KAAK,iBAAiB,CAAC,EAAE;MAC5M,MAAMC,MAAM,GAAG,IAAIC,UAAU,EAAE;MAE/BD,MAAM,CAACE,MAAM,GAAG,UAASP,KAAK,EAAE;QAC9B,MAAMQ,QAAQ,GAAGR,KAAK,CAACE,MAAM,CAACO,MAAM;QACpC,MAAMZ,MAAM,GAAGW,QAAQ,CAACE,KAAK,CAAC,sDAAsD,CAAC,IAAI,EAAE,CAAC,CAAC;;QAE7Fd,aAAa,CAACC,MAAM,CAACc,MAAM,CAAC;QAC5Bb,SAAS,CAACD,MAAM,CAAC;MACnB,CAAC;MAEDQ,MAAM,CAACO,UAAU,CAACX,IAAI,CAAC;IACzB,CAAC,MAAM;MACLY,KAAK,CAAC,4BAA4B,CAAC;IACrC;EACF;EAEA,oBACErB,OAAA;IAAAsB,QAAA,gBACEtB,OAAA;MAAOY,IAAI,EAAC,MAAM;MAACW,QAAQ,EAAEhB;IAAoB;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eACpD3B,OAAA;MAAAsB,QAAA,GAAG,0BAAwB,EAACnB,UAAU;IAAA;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,EAC1CtB,MAAM,CAACc,MAAM,GAAG,CAAC,iBAChBnB,OAAA;MAAAsB,QAAA,gBACEtB,OAAA;QAAAsB,QAAA,EAAG;MAAO;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAI,eACd3B,OAAA;QAAAsB,QAAA,EACGjB,MAAM,CAACuB,GAAG,CAACC,KAAK,iBACf7B,OAAA;UAAAsB,QAAA,EAAiBO;QAAK,GAAbA,KAAK;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACf;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAER;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACG;AAEV;AAACzB,EAAA,CAzCQD,YAAY;AAAA6B,EAAA,GAAZ7B,YAAY;AA2CrB,eAAeA,YAAY;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}