{"ast":null,"code":"var _jsxFileName = \"/home/ismail/React/todo list/todo/src/Import/Word.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport mammoth from 'mammoth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Word = () => {\n  _s();\n  const [extractedText, setExtractedText] = useState('');\n  const readDOCX = async file => {\n    const arrayBuffer = await file.arrayBuffer();\n    const {\n      value\n    } = await mammoth.extractRawText({\n      arrayBuffer\n    });\n    setExtractedText(value);\n  };\n  const handleFileSelect = useCallback(event => {\n    var _event$target$files;\n    const file = (_event$target$files = event.target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files[0];\n    if (file && file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {\n      readDOCX(file);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-upload\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file-upload\",\n        className: \"cursor-pointer\",\n        children: \"Upload Word Document\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"file-upload\",\n        type: \"file\",\n        onChange: handleFileSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), extractedText && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"extracted-text\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Extracted Text:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: extractedText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(Word, \"8MGIlusdxSMLkpw58YjPO2jiSwA=\");\n_c = Word;\nexport default Word;\nvar _c;\n$RefreshReg$(_c, \"Word\");","map":{"version":3,"names":["React","useState","useCallback","mammoth","jsxDEV","_jsxDEV","Word","_s","extractedText","setExtractedText","readDOCX","file","arrayBuffer","value","extractRawText","handleFileSelect","event","_event$target$files","target","files","type","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","onChange","_c","$RefreshReg$"],"sources":["/home/ismail/React/todo list/todo/src/Import/Word.js"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport mammoth from 'mammoth';\n\nconst Word= () => {\n  const [extractedText, setExtractedText] = useState('');\n\n  const readDOCX = async (file) => {\n    const arrayBuffer = await file.arrayBuffer();\n    const { value } = await mammoth.extractRawText({ arrayBuffer });\n    setExtractedText(value);\n  };\n\n  const handleFileSelect = useCallback((event) => {\n    const file = event.target.files?.[0];\n    if (file && file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {\n      readDOCX(file);\n    }\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <div className=\"file-upload\">\n        <label htmlFor=\"file-upload\" className=\"cursor-pointer\">\n          Upload Word Document\n        </label>\n        <input id=\"file-upload\" type=\"file\" onChange={handleFileSelect} />\n      </div>\n      {extractedText && (\n        <div className=\"extracted-text\">\n          <h3>Extracted Text:</h3>\n          <pre>{extractedText}</pre>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Word;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACpD,OAAOC,OAAO,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,IAAI,GAAEA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEtD,MAAMS,QAAQ,GAAG,MAAOC,IAAI,IAAK;IAC/B,MAAMC,WAAW,GAAG,MAAMD,IAAI,CAACC,WAAW,EAAE;IAC5C,MAAM;MAAEC;IAAM,CAAC,GAAG,MAAMV,OAAO,CAACW,cAAc,CAAC;MAAEF;IAAY,CAAC,CAAC;IAC/DH,gBAAgB,CAACI,KAAK,CAAC;EACzB,CAAC;EAED,MAAME,gBAAgB,GAAGb,WAAW,CAAEc,KAAK,IAAK;IAAA,IAAAC,mBAAA;IAC9C,MAAMN,IAAI,IAAAM,mBAAA,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,cAAAF,mBAAA,uBAAlBA,mBAAA,CAAqB,CAAC,CAAC;IACpC,IAAIN,IAAI,IAAIA,IAAI,CAACS,IAAI,KAAK,yEAAyE,EAAE;MACnGV,QAAQ,CAACC,IAAI,CAAC;IAChB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEN,OAAA;IAAKgB,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBjB,OAAA;MAAKgB,SAAS,EAAC,aAAa;MAAAC,QAAA,gBAC1BjB,OAAA;QAAOkB,OAAO,EAAC,aAAa;QAACF,SAAS,EAAC,gBAAgB;QAAAC,QAAA,EAAC;MAExD;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAQ,eACRtB,OAAA;QAAOuB,EAAE,EAAC,aAAa;QAACR,IAAI,EAAC,MAAM;QAACS,QAAQ,EAAEd;MAAiB;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAC9D,EACLnB,aAAa,iBACZH,OAAA;MAAKgB,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC7BjB,OAAA;QAAAiB,QAAA,EAAI;MAAe;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eACxBtB,OAAA;QAAAiB,QAAA,EAAMd;MAAa;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAO;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAE7B;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACG;AAEV,CAAC;AAACpB,EAAA,CAhCID,IAAI;AAAAwB,EAAA,GAAJxB,IAAI;AAkCV,eAAeA,IAAI;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}